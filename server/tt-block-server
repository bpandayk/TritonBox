#!/usr/bin/env python
import sys
import copy
import socket
import logging
logging.basicConfig()

sys.path.append('gen-py')

from cse124 import TritonTransfer
from cse124.ttypes import *

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer


#holds all the file blocks with their hahses
global Blocksdata
Blocksdata = {}

global hashipport
hashipport={}

def isOn(servername, serverport, cport):
    transport = TSocket.TSocket(servername,serverport)

     # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = TritonTransfer.Client(protocol)

    # Connect!
    transport.open()
    print "connected"
    getip=socket.gethostbyname(socket.gethostname())
    client.hasOpen(getip, cport)
 
class TransferHandler:
  def uploadBlock(self, hashVal, fileblock):
    upd = {hashVal:fileblock}
    Blocksdata.update(upd)
    return "OK"

  def downloadBlock(self, fileblock):
    if fileblock in Blocksdata.keys():
      return Blocksdata[fileblock]
    else:
      return "ERROR"

args = len(sys.argv)
if args<4:
  print "ARGUMENTS ERROR"
  exit()
else:
   pt = str(sys.argv[1]) 
   pt = int(pt)
   msip = str(sys.argv[2])
   msprt = str(sys.argv[3]) 
   msprt = int(msprt)   
handler = TransferHandler()
processor = TritonTransfer.Processor(handler)
transport = TSocket.TServerSocket(port=pt)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()
server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

isOn(msip, msprt, pt)

server.serve()





