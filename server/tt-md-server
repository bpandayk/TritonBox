#!/usr/bin/env python
import sys
import copy
import random
import logging
logging.basicConfig()

sys.path.append('gen-py')

from cse124 import TritonTransfer
from cse124.ttypes import *

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

#holds the list of filenames and there hashblocks
global FileList
FileList = {}
global serverfile
serverfile={}
global serverlist
serverlist=[]
#holds all the file blocks with their hahses


class TransferHandler:
  def ping(self):
    print('ping()')
    
  def hasOpen(self, ip, port):
    serverlist.append(ip)
    serverlist.append(str(port))
     

  def uploadFile(self,filename,hashlist):
    if FileList and filename in FileList.keys(): 
      l = []
      return l 
    else:
      up = {filename: hashlist}
      rethash = copy.deepcopy(hashlist)
      FileList.update(up)
      for index in range(len(hashlist)):
         if hashlist[index] in serverfile.keys():
           rethash.remove(hashlist[index])
      ran1 = random.randint(0,2)
      ran2 = random.randint(0,2)

      if ran1 == ran2:
        while ran1!=ran2:
          ran2 = random.randint(0,2)
      retlist=[]
      if ran1==0:
        retlist.append(serverlist[0])
        retlist.append(serverlist[1])

      if ran1==1:
        retlist.append(serverlist[2])
        retlist.append(serverlist[3])

      if ran1==2:
        retlist.append(serverlist[4])
        retlist.append(serverlist[5])

      if ran2==0:
        retlist.append(serverlist[0])
        retlist.append(serverlist[1])

      if ran2==1:
        retlist.append(serverlist[2])
        retlist.append(serverlist[3])

      if ran2==2:
        retlist.append(serverlist[4])
        retlist.append(serverlist[5])

      for index in range(len(rethash)):
        retlist.append(rethash[index])
       
      for index in range(len(rethash)):
        upd = {rethash[index]: [retlist[0], retlist[1],retlist[2],retlist[3]]}
        serverfile.update(upd)

      return retlist     

  def updateServList(self, hashlist, ip, port):
    up = {hashlist:[ip,port]}    
    serverfile.update(up)
    return "Saved"
    print serverfile
    
  def downloadFile(self, filename):
    retlist=[]
    if filename in FileList.keys():
      hashli = FileList[filename]
      for index in range(len(hashli)):
        if hashli[index] in serverfile.keys():
          retlist.append(hashli[index])
          up = serverfile[hashli[index]]
          retlist.append(up[0]) 
          retlist.append(up[1])
          retlist.append(up[2])
          retlist.append(up[3]) 
      return retlist
    else:
      return "ERROR"


args = len(sys.argv)
if args<2:
  print ""
  exit()
else:
   pt = str(sys.argv[1]) 
   pt = int(pt)    
handler = TransferHandler()
processor = TritonTransfer.Processor(handler)
transport = TSocket.TServerSocket(port=pt)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()
server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)
server.serve()

