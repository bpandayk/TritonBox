#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from cse124 import TritonTransfer
from cse124.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '   uploadFile(string filename,  hashList)'
  print '  string uploadBlock(string hashVal, string fileblock)'
  print '   downloadFile(string filename)'
  print '  string updateServList(string hashList, string ip, i64 port)'
  print '  string downloadBlock(string fileblock)'
  print '  void hasOpen(string ip, i64 port)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TritonTransfer.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'uploadFile':
  if len(args) != 2:
    print 'uploadFile requires 2 args'
    sys.exit(1)
  pp.pprint(client.uploadFile(args[0],eval(args[1]),))

elif cmd == 'uploadBlock':
  if len(args) != 2:
    print 'uploadBlock requires 2 args'
    sys.exit(1)
  pp.pprint(client.uploadBlock(args[0],args[1],))

elif cmd == 'downloadFile':
  if len(args) != 1:
    print 'downloadFile requires 1 args'
    sys.exit(1)
  pp.pprint(client.downloadFile(args[0],))

elif cmd == 'updateServList':
  if len(args) != 3:
    print 'updateServList requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateServList(args[0],args[1],eval(args[2]),))

elif cmd == 'downloadBlock':
  if len(args) != 1:
    print 'downloadBlock requires 1 args'
    sys.exit(1)
  pp.pprint(client.downloadBlock(args[0],))

elif cmd == 'hasOpen':
  if len(args) != 2:
    print 'hasOpen requires 2 args'
    sys.exit(1)
  pp.pprint(client.hasOpen(args[0],eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
